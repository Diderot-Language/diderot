// from http://en.wikipedia.org/wiki/Square_root_of_3
#define M_SQRT3 @REALTY@(1.732050807568877293527446341506)

static int eigenvals (tensor_ref_3_3 const &mat, diderot::array<@REALTY@,3> &eval)
{
    int roots;

  /* copy the given matrix elements */
    @REALTY@ M00 = mat[0];
    @REALTY@ M01 = mat[1];
    @REALTY@ M02 = mat[2];
    @REALTY@ M11 = mat[4];
    @REALTY@ M12 = mat[5];
    @REALTY@ M22 = mat[8];

  /* subtract out the eigenvalue mean (we will add it back to evals later);
   * helps with numerical stability
   */
    @REALTY@ mean = (M00 + M11 + M22) / @REALTY@(3);
    M00 -= mean;
    M11 -= mean;
    M22 -= mean;

  /*
  ** divide out L2 norm of eigenvalues (will multiply back later);
  ** this too seems to help with stability
  */
    @REALTY@ norm = std::sqrt(M00*M00 + 2*M01*M01 + 2*M02*M02 + M11*M11 + 2*M12*M12 + M22*M22);
    @REALTY@ rnorm = (norm > diderot::__details::EPSILON) ? @REALTY@(1) / norm : @REALTY@(1);
    M00 *= rnorm;
    M01 *= rnorm;
    M02 *= rnorm;
    M11 *= rnorm;
    M12 *= rnorm;
    M22 *= rnorm;

  /* this code is a mix of prior Teem code and ideas from Eberly's
   * "Eigensystems for 3 x 3 Symmetric Matrices (Revisited)"
   */
    @REALTY@ Q = (M01*M01 + M02*M02 + M12*M12 - M00*M11 - M00*M22 - M11*M22) / @REALTY@(3);
    @REALTY@ QQQ = Q*Q*Q;
    @REALTY@ R = @REALTY@(0.5) * (M00*M11*M22 + M02*(2*M01*M12 - M02*M11) - M00*M12*M12 - M01*M01*M22);
    @REALTY@ D = QQQ - R*R;
    if (D > diderot::__details::EPSILON) {
      /* three distinct roots- this is the most common case */
        @REALTY@ theta = std::atan2(std::sqrt(D), R) / @REALTY@(3);
        @REALTY@ mm = std::sqrt(Q);
        @REALTY@ ss = std::sin(theta);
        @REALTY@ cc = std::cos(theta);
        eval[0] = 2*mm*cc;
        eval[1] = mm*(-cc + M_SQRT3 * ss);
        eval[2] = mm*(-cc - M_SQRT3 * ss);
        roots = diderot::__details::ROOT_THREE;
    }
  /* else D is near enough to zero */
    else if (std::abs(R) > diderot::__details::EPSILON) {
      /* one double root and one single root */
        @REALTY@ U = std::cbrt(R); /* cube root function */
        if (U > 0) {
            eval[0] = 2*U;
            eval[1] = -U;
            eval[2] = -U;
        }
        else {
            eval[0] = -U;
            eval[1] = -U;
            eval[2] = 2*U;
        }
        roots = diderot::__details::ROOT_SINGLE_DOUBLE;
    }
    else {
      /* a triple root! */
        eval[0] = eval[1] = eval[2] = 0.0;
        roots = diderot::__details::ROOT_TRIPLE;
    }

  /* multiply back by eigenvalue L2 norm */
    eval[0] /= rnorm;
    eval[1] /= rnorm;
    eval[2] /= rnorm;

  /* add back in the eigenvalue mean */
    eval[0] += mean;
    eval[1] += mean;
    eval[2] += mean;

    return roots;
}

#undef M_SQRT3
